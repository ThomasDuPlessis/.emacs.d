var X = 1;
var O = 2;
var empty = 0;
var TicTacToe = {
		board: [
				[empty, empty, empty],
				[empty, empty, empty],
				[empty, empty, empty]
		],
		setX: function (row, col) {
				this.board[row][col] = X;
		},
		setO: function (row, col) {
				this.board[row][col] = O;
		},
		isOver: function () {
				return getWinner(this.board) != empty;
		},
		getGameWinner: function () {
				return getWinner(this.board);
		},
		printBoard: function () {
				var boardString = '_____________';
				for (var i = 0; i < this.board.length; i++) {
						boardString += '\n|';
						for (var j = 0; j < this.board[i].length; j++) {
								if (this.board[i][j] == X)
										boardString += ' X |';
								else if (this.board[i][j] == O) {
										boardString += ' O |';
								} else {
										boardString += ' _ |';
								}
						}
				}
				console.log(boardString + '\n_____________');
		},
		flattenBoard: function () {
				return [].concat.apply([], this.board);
		}
};
// returns the winner who won in board, returns empty if non did
function getWinner(board) {
		for (var i = 0; i < 3; i++) {
				// check rows
				if (board[i][0] == board[i][1] && board[i][0] == board[i][2]) {
						return board[i][0];
				}
				// check columns

				if ((board[0][i] == board[1][i] && board[0][i] == board[2][i])) {
						return [0][i];
				}
		}
		// check diagonals

		if ((board[0][0] == board[1][1] && board[0][0] == board[2][2]) ||
				(board[0][2] == board[1][1] && board[0][2] == board[2][0])) {
				return board[1][1];
		}
		return empty;
}
function AINextMove(game) {
		// console.log(game);
		var possiblespots = game.flattenBoard().reduce(function (prev, cur, curInd, arr) {
				if (cur != X && cur != O) {
						prev.push(curInd);
				}
				return prev;
		}, [
		]);
		var move = Math.round(Math.random() * possiblespots.length);
		var row = Math.round(move / 3);
		var col = move % 3;
		// console.log(possiblespots, move, row, col);
		game.setO(row, col);
}

TicTacToe.printBoard();
AINextMove(TicTacToe);
TicTacToe.printBoard();


