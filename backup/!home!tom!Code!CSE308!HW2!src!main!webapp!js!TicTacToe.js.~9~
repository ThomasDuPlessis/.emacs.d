var X = 1;
var O = 2;
var empty = 0;

function convert(val){
		switch(val){
		case 1:
				return "X";
		case 2:
				return "O";
		default:
				return " ";
		}
}

var TicTacToe = {
		board: [
				[empty, empty, empty],
				[empty, empty, empty],
				[empty, empty, empty]
		],
		setX: function (row, col) {
				this.board[row][col] = X;
		},
		setO: function (row, col) {
				this.board[row][col] = O;
		},
		isOver: function () {
				return getWinner(this.board) != empty;
		},
		getGameWinner: function () {
				return getWinner(this.board);
		},
		printBoard: function () {
				var boardString = '_____________';
				for (var i = 0; i < this.board.length; i++) {
						boardString += '\n|';
						for (var j = 0; j < this.board[i].length; j++) {
								if (this.board[i][j] == X)
										boardString += ' X |';
								else if (this.board[i][j] == O) {
										boardString += ' O |';
								} else {
										boardString += ' _ |';
								}
						}
				}
				console.log(boardString + '\n_____________');
		},
		flattenBoard: function () {
				return [].concat.apply([], this.board);
		},
		doComputerMove: function (){
				AINextMove(this);
		},
		convertTableToBoard: function() {
				return this.board.map(function (e){
						e.map(convert);
				});
		}
};

// returns the winner who won in board, returns empty if non did
function getWinner(board) {
		for (var i = 0; i < 3; i++) {
				// check rows
				if (board[i][0] == board[i][1] && board[i][0] == board[i][2]) {
						return board[i][0];
				}
				// check columns

				if ((board[0][i] == board[1][i] && board[0][i] == board[2][i])) {
						return [0][i];
				}
		}
		// check diagonals

		if ((board[0][0] == board[1][1] && board[0][0] == board[2][2]) ||
				(board[0][2] == board[1][1] && board[0][2] == board[2][0])) {
				return board[1][1];
		}
		return empty;
}
function AINextMove(game) {
		// console.log(game);
		var possiblespots = game.flattenBoard().reduce(function (prev, cur, curInd, arr) {
				if (cur != X && cur != O) {
						prev.push(curInd);
				}
				return prev;
		}, [
		]);
		var move = Math.round(Math.random() * possiblespots.length);
		var row = Math.round(move / 3);
		var col = move % 3;
		// console.log(possiblespots, move, row, col);
		game.setO(row, col);
}

// converts the table in TicTacToe.html to a javascript 2d array
function convertTableToBoard(){
		var newboard = [];
		$("table tr").each(function() {
				var arrayOfThisRow = [];
				var tableData = $(this).find('td');
				if (tableData.length > 0) {
						tableData.each(function() { arrayOfThisRow.push($(this).text()); });
						newboard.push(arrayOfThisRow);
				}
		});
		return newboard;
}

function createTTTBoard(){
		var table = convertTableToBoard();
		var board = Object.create(TicTacToe);
		board.board = table;
		return board;
}

// change the board when a user clicks, and call AI
$(document).ready(function() {
		$( "table tr td" ).click(function(e){
	//			alert("pressed me");
				$(this).append("X");
				var newTable = createTTTBoard();
				if(newTable.isOver()){
						alert("You Win");
				} else {
						newTable.doComputerMove();
						for(var i = 0; i < newTable.board.length; i++) {
								for(var j = 0; j < newTable.board[0].length; j++) {
										let z = 2;
										var jqObj= $( "tr#" + i.toString + j.toString );
										jqObj.append(newTable.convertTableToBoard[i][j]);
								}
						}
				}
		});
});

Lint at line 133 character 41: Expected an identifier and instead saw 'let'.
let jqObj =

Lint at line 133 character 41: Expected an assignment or function call and instead saw an expression.
let jqObj =

Lint at line 133 character 44: Missing semicolon.
let jqObj =

Lint at line 134 character 41: Expected an identifier and instead saw '.'.
.append(newTable.convertTableToBoard[i][j]);

Lint at line 134 character 42: Missing semicolon.
.append(newTable.convertTableToBoard[i][j]);


Process flymake-proc finished
