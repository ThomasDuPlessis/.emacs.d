\documentclass[11pt]{article}

\usepackage{fullpage}
\usepackage{epsfig}

\begin{document}

\centerline{AMS 545/CSE 555 (Spring, 2016) \hfill Joe Mitchell}
\medskip
\centerline{\Large\bf COMPUTATIONAL GEOMETRY}
\bigskip

\centerline{\Large\bf Homework Problem \# 8}

\bigskip


{\bf Upload your solution to Blackboard by the due date.}
You are expected to write up your solutions {\em on your own}, {\bf
without referring to other students' writeups or to solutions you may
find on the web}; you are welcome to discuss problems with me, the TA,
and classmates, but {\bf must do the writeup entirely on your own}.

\medskip
{\bf Do NOT write your name on your submission.} It is recorded with Blackboard, so we know who you are.  But we want your paper to be
anonymous, since it may be peer-assessed.
\medskip

\noindent Recommended Reading: BKOS: Chapter 2; O'Rourke sections 7.7, 7.8. Handout on Melkman's algorithm.

\medskip

\medskip
\noindent {\bf (8).} 
(a). Assume that we execute Melkman's convex hull algorithm
on the vertices of the chain shown below in the order $v_0$, $v_1$, $v_2$, $v_3$,
etc. (In the figure, I label $v_i$ with ``$i$''.)  Show the deque,
clearly indicating the ``top'' $d_t$ and ``bottom'' $d_b$ at each step of the algorithm.
Also, which two Left tests are done at each step, in order to determine if $v_i$ lies within
the convex hull so far?

\centerline{\psfig{file=10/figs/hw2-5.eps,height=3.6in}}

(b).  For each of the following sequences of deques, determine if there is a simple chain for which
Melkman's algorithm would give the sequence.  If there is a chain compatible with the execution sequence of deques, draw one;
if not, say why not.

\noindent (i). $<2,1,0,2>, <2,1,0,2>, <3,0,2,1,3>, <4,0,2,1,3,4>$

\noindent (ii). $<2,1,0,2>, <3,2,1,0,3>, <4,3,2,1,0,4>, <5,4,3,2,1,0,5>$

\noindent (iii). $<2,1,0,2>, <3,1,0,3>, <4,1,0,4>, <5,1,0,5>$

\noindent (iv). $<2,1,0,2>, <3,0,1,3>, <4,1,0,4>, <5,0,1,5>$

\medskip

(c). The following algorithm is proposed to compute the lower hull of
a simple chain in linear time: The input is a chain ($p_0$,
$p_1,\ldots,p_{n-1}$) of $n$ points; we assume that $p_0$ is the
leftmost among the $n$ points and that $p_{n-1}$ is the rightmost
among the $n$ points.  We assume also that there are no degeneracies:
there are no three points that are collinear, and no two points have
the same $x$- or $y$-coordinate.  The algorithm simply follows the
Graham scan idea: Maintain a chain $C$ that is ``left-turning'' as we
sweep through the points from $p_1$ to $p_{n-1}$.
If the next processed point lies to the right of the last edge of the
chain $C$, then we pop points off of the chain until the new point can
be added (pushed) onto the chain while obeying the left turning
property; if the next processed point lies to the left of the last
edge of the chain $C$, then simply add the new point onto the chain
$C$.
What goes wrong with this algorithm?  Give an explicit example where it
fails to find the correct lower hull of a simple chain.


\vfill
\end{document}
